"use strict";
/**
 * Various system related utilities
 */
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
/**
 * Removes a file synchronously
 * @param file - file to remove
 */
exports.removeFileSync = function (file) {
    child_process_1.spawnSync('rm', ['-f', file]);
};
/**
 * Removes a file
 * @param file - file to remove
 */
exports.removeFile = function (file) {
    return new Promise(function (resolve, reject) {
        var p = child_process_1.spawn('rm', ['-f', file]);
        p.on('error', function (err) {
            reject(err);
        });
        p.on('close', function (code) {
            if (code === 0) {
                resolve();
            }
            else {
                reject('exited with code ' + code);
            }
        });
    });
};
exports.processIsRunning = function (pid) {
    try {
        // this actually returns a boolean, not sure why its not in @types/node
        return (process.kill(pid, 0));
    }
    catch (e) {
        return e.code === 'EPERM';
    }
};
/**
 * Removes files in the given directory synchronously
 * @param dir
 */
exports.removeDirectorySync = function (dir) {
    child_process_1.spawnSync('find', [dir, '-exec', 'rm', '-rf', '{}', '+']);
};
/**
 * Removes files in the given directory
 * @param dir
 */
exports.removeDirectory = function (dir) {
    return new Promise(function (resolve, reject) {
        var p = child_process_1.spawn('find', [dir, '-exec', 'rm', '-rf', '{}', '+']);
        p.on('error', function (err) {
            reject(err);
        });
        p.on('close', function (code) {
            if (code === 0) {
                resolve();
            }
            else {
                reject('exited with code ' + code);
            }
        });
    });
};
//# sourceMappingURL=System.js.map