import { Storage as DStorage } from "../../Plugin/Storage";
import { Storage, Bucket } from '@google-cloud/storage';
import { DeepPartial } from "../../utils/DeepPartial";
import { Dimension } from "../../Dimension";
import { Plugin } from "../../Plugin";
import { nanoid } from "../..";
import { Database } from "../../Plugin/Database";
import { Tournament } from "../../Tournament";
export declare class GCloudStorage extends DStorage {
    name: string;
    type: Plugin.Type;
    storage: Storage;
    configs: GCloudStorage.Configs;
    dimensionBucket: Bucket;
    constructor(configs: GCloudStorage.Configs);
    /**
     * Initializer. Initializes the storage object and creates necessary buckets
     */
    initialize(dimension: Dimension): Promise<void>;
    uploadTournamentFile(file: string, user: Database.User, tournament: Tournament): Promise<string>;
    upload(file: string, destination?: string): Promise<string>;
    uploadUserFile(file: string, userID: nanoid, destination?: string): Promise<string>;
    download(key: string, destination: string): Promise<unknown>;
    /**
     * Returns a download URL to use to download an object
     * @param key - key referencing the object to download
     */
    getDownloadURL(key: string): Promise<string>;
    manipulate(dimension: Dimension): Promise<void>;
}
export declare module GCloudStorage {
    /**
     * Specific configurations for GCloud storage
     */
    interface Configs extends DeepPartial<DStorage.Configs> {
        /**
         * Path to key file from a google account service key
         */
        keyFilename: string;
        /**
         * Project ID
         */
        projectId: string;
    }
}
