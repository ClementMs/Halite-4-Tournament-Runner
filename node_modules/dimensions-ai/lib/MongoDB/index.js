"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongoose_1 = __importDefault(require("mongoose"));
var Plugin_1 = require("../Plugin");
var Database_1 = require("../Plugin/Database");
var Dimension_1 = require("../Dimension");
var match_1 = __importDefault(require("./models/match"));
var match_2 = require("../Station/routes/api/dimensions/match");
var bcryptjs_1 = __importDefault(require("bcryptjs"));
var user_1 = __importDefault(require("./models/user"));
var utils_1 = require("../Plugin/Database/utils");
var salt = bcryptjs_1.default.genSaltSync();
var MongoDB = /** @class */ (function (_super) {
    __extends(MongoDB, _super);
    function MongoDB(connectionString, configs) {
        if (configs === void 0) { configs = {}; }
        var _this = _super.call(this, configs) || this;
        _this.name = 'MongoDB';
        _this.type = Plugin_1.Plugin.Type.DATABASE;
        _this.models = {
            user: null,
            match: null
        };
        mongoose_1.default.set('useFindAndModify', false);
        _this.connectionString = connectionString;
        var matchSchema = match_1.default();
        _this.models.match = mongoose_1.default.model('Match', matchSchema);
        var userSchema = user_1.default();
        _this.models.user = mongoose_1.default.model('User', userSchema);
        return _this;
    }
    /**
     * Connects to the mongo database and returns the Connection object
     */
    MongoDB.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                mongoose_1.default.connect(this.connectionString, { useNewUrlParser: true });
                this.db = mongoose_1.default.connection;
                this.db.on('error', console.error.bind(console, 'connection error:'));
                return [2 /*return*/, this.db];
            });
        });
    };
    MongoDB.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MongoDB.prototype.storeMatch = function (match) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = match_2.pickMatch(match);
                // store all relevant data
                return [2 /*return*/, this.models.match.create(data)];
            });
        });
    };
    MongoDB.prototype.getMatch = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.models.match.findOne({ id: id })];
            });
        });
    };
    MongoDB.prototype.registerUser = function (username, password, userData) {
        return __awaiter(this, void 0, void 0, function () {
            var hash;
            return __generator(this, function (_a) {
                hash = bcryptjs_1.default.hashSync(password, salt);
                return [2 /*return*/, this.models.user.create({
                        username: username,
                        passwordHash: hash,
                        statistics: {}
                    })];
            });
        });
    };
    /**
     * Gets user information. If public is false, will retrieve all information other than password
     * @param usernameOrID
     */
    MongoDB.prototype.getUser = function (usernameOrID, publicView) {
        if (publicView === void 0) { publicView = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.models.user.findOne({ $or: [{ username: usernameOrID }, { playerID: usernameOrID }] }).then(function (user) {
                        if (user)
                            return user.toObject();
                        return null;
                    })];
            });
        });
    };
    MongoDB.prototype.loginUser = function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.models.user.findOne({ username: username }).then(function (user) {
                        if (user) {
                            if (bcryptjs_1.default.compareSync(password, user.passwordHash)) {
                                return utils_1.generateToken(user);
                            }
                            else {
                                throw new Error('Invalid password');
                            }
                        }
                        else {
                            throw new Error('Not a valid user');
                        }
                    })];
            });
        });
    };
    MongoDB.prototype.updateUser = function (usernameOrID, update) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.models.user.findOneAndUpdate({ $or: [{ username: usernameOrID }, { playerID: usernameOrID }] }, update).then(function (user) {
                        if (user) {
                            return user.toObject();
                        }
                        else {
                            throw new Error('Not a valid user');
                        }
                    })];
            });
        });
    };
    MongoDB.prototype.deleteUser = function (usernameOrID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.models.user.findOneAndDelete({ $or: [{ username: usernameOrID }, { playerID: usernameOrID }] }).then(function (user) {
                        if (!user) {
                            throw new Error('Not a valid user');
                        }
                    })];
            });
        });
    };
    MongoDB.prototype.verifyToken = function (jwt) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, utils_1.verify(jwt)];
            });
        });
    };
    MongoDB.prototype.getUsersInTournament = function (tournamentKey) {
        return __awaiter(this, void 0, void 0, function () {
            var key;
            var _a;
            return __generator(this, function (_b) {
                key = "statistics." + tournamentKey;
                return [2 /*return*/, this.models.user.find((_a = {}, _a[key] = { $exists: true }, _a)).then(function (users) {
                        if (!users) {
                            throw new Error('No users');
                        }
                        else {
                            var mapped = users.map(function (user) { return user.toObject(); });
                            return mapped;
                        }
                    })];
            });
        });
    };
    MongoDB.prototype.manipulate = function (dimension) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                dimension.configs.backingDatabase = Dimension_1.DatabaseType.MONGO;
                return [2 /*return*/];
            });
        });
    };
    return MongoDB;
}(Database_1.Database));
exports.MongoDB = MongoDB;
//# sourceMappingURL=index.js.map