"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var DeepMerge_1 = require("../../utils/DeepMerge");
var DimensionError_1 = require("../../DimensionError");
var Logger_1 = require("../../Logger");
var sprintf_js_1 = require("sprintf-js");
/**
 * The Round Robin Tournament Class
 *
 * Only supports two agent matches at the moment and is meant for single instance use only
 */
var RoundRobin = /** @class */ (function (_super) {
    __extends(RoundRobin, _super);
    function RoundRobin(design, files, tournamentConfigs, id, dimension) {
        var _this = _super.call(this, design, files, id, tournamentConfigs, dimension) || this;
        _this.configs = {
            defaultMatchConfigs: {},
            type: __1.Tournament.Type.ROUND_ROBIN,
            rankSystem: null,
            rankSystemConfigs: null,
            tournamentConfigs: {
                times: 2,
                storePastResults: true
            },
            agentsPerMatch: [2],
            resultHandler: null,
            consoleDisplay: true,
            id: 'aa2qlM'
        };
        _this.shouldStop = false;
        _this.state = {
            playerStats: new Map(),
            results: [],
            statistics: {
                totalMatches: 0
            }
        };
        if (tournamentConfigs.consoleDisplay) {
            _this.configs.consoleDisplay = tournamentConfigs.consoleDisplay;
        }
        // handle config defaults
        if (tournamentConfigs.rankSystem !== __1.Tournament.RankSystem.WINS) {
            throw new DimensionError_1.NotSupportedError('We currently do not support Round Robin tournaments with ranking system other than wins system');
        }
        for (var i = 0; i < tournamentConfigs.agentsPerMatch.length; i++) {
            if (tournamentConfigs.agentsPerMatch[i] != 2)
                throw new DimensionError_1.NotSupportedError('We currently only support 2 agents per match for Round Robin ');
        }
        if (!tournamentConfigs.rankSystemConfigs) {
            _this.configs.rankSystemConfigs = {
                winValue: 3,
                tieValue: 1,
                lossValue: 0,
                ascending: false
            };
        }
        // TODO we need to type check the result handler and see if it is correct. Throw a error if handler is of wrong format at runtime somehow
        // handle rest. pass true flag to make sure arrays are clobbered and not merged
        _this.configs = DeepMerge_1.deepMerge(_this.configs, tournamentConfigs, true);
        // add all players
        files.forEach(function (file) {
            _this.addplayer(file);
        });
        _this.status = __1.Tournament.Status.INITIALIZED;
        _this.log.info('Initialized Round Robin Tournament');
        return _this;
    }
    /**
     * Runs a round robin to completion. Resolves with the {@link RoundRobin.State} once the tournament is finished
     * @param configs - the configs to use for this run
     */
    RoundRobin.prototype.run = function (configs) {
        return __awaiter(this, void 0, void 0, function () {
            var matchInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.status = __1.Tournament.Status.RUNNING;
                        this.log.info('Running Tournament');
                        this.configs = DeepMerge_1.deepMerge(this.configs, configs, true);
                        this.initialize();
                        this.schedule();
                        _a.label = 1;
                    case 1:
                        if (!this.matchQueue.length) return [3 /*break*/, 5];
                        if (!this.shouldStop) return [3 /*break*/, 3];
                        this.log.info('Stopped Tournament');
                        this.resolveStopPromise();
                        return [4 /*yield*/, this.resumePromise];
                    case 2:
                        _a.sent();
                        this.log.info('Resumed Tournament');
                        this.shouldStop = false;
                        _a.label = 3;
                    case 3:
                        matchInfo = this.matchQueue.shift();
                        return [4 /*yield*/, this.handleMatch(matchInfo)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 5:
                        this.status = __1.Tournament.Status.FINISHED;
                        return [2 /*return*/, this.state];
                }
            });
        });
    };
    /**
     * Handles the start and end of a match, and updates state accrding to match results and the given result handler
     * @param matchInfo
     */
    RoundRobin.prototype.handleMatch = function (matchInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var names_1, matchRes, resInfo;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.configs.consoleDisplay) {
                            this.printTournamentStatus();
                            console.log();
                            console.log('Current Matches: ' + (this.matches.size + 1));
                            this.matches.forEach(function (match) {
                                var names = [];
                                match.agents.forEach(function (agent) {
                                    names.push(agent.name);
                                });
                                console.log(names);
                            });
                            names_1 = [];
                            matchInfo.forEach(function (player) {
                                names_1.push(player.tournamentID.name);
                            });
                            console.log(names_1);
                        }
                        this.log.detail('Running match - Competitors: ', matchInfo.map(function (player) { return player.tournamentID.name; }));
                        return [4 /*yield*/, this.runMatch(matchInfo)];
                    case 1:
                        matchRes = _a.sent();
                        resInfo = this.configs.resultHandler(matchRes.results);
                        // store past results
                        if (this.configs.tournamentConfigs.storePastResults) {
                            if (!(this.dimension.hasDatabase() && this.dimension.databasePlugin.configs.saveTournamentMatches)) {
                                // if we have don't have a database that is set to actively store tournament matches we store locally
                                this.state.results.push(matchRes.results);
                            }
                        }
                        // update total matches
                        this.state.statistics.totalMatches++;
                        // update matches played per player
                        matchInfo.map(function (player) {
                            var oldplayerStat = _this.state.playerStats.get(player.tournamentID.id);
                            oldplayerStat.matchesPlayed++;
                            _this.state.playerStats.set(player.tournamentID.id, oldplayerStat);
                        });
                        // handle winners, tied, and losers players and update their stats
                        resInfo.winners.forEach(function (winnerID) {
                            // resInfo contains agentIDs, which need to be remapped to tournament IDs
                            var tournamentID = matchRes.match.mapAgentIDtoTournamentID.get(winnerID);
                            var oldplayerStat = _this.state.playerStats.get(tournamentID.id);
                            oldplayerStat.wins++;
                            _this.state.playerStats.set(tournamentID.id, oldplayerStat);
                        });
                        resInfo.ties.forEach(function (tieplayerID) {
                            var tournamentID = matchRes.match.mapAgentIDtoTournamentID.get(tieplayerID);
                            var oldplayerStat = _this.state.playerStats.get(tournamentID.id);
                            oldplayerStat.ties++;
                            _this.state.playerStats.set(tournamentID.id, oldplayerStat);
                        });
                        resInfo.losers.forEach(function (loserplayerID) {
                            var tournamentID = matchRes.match.mapAgentIDtoTournamentID.get(loserplayerID);
                            var oldplayerStat = _this.state.playerStats.get(tournamentID.id);
                            oldplayerStat.losses++;
                            _this.state.playerStats.set(tournamentID.id, oldplayerStat);
                        });
                        if (this.configs.consoleDisplay) {
                            this.printTournamentStatus();
                            console.log();
                            console.log('Current Matches: ' + this.matches.size);
                            this.matches.forEach(function (match) {
                                var names = [];
                                match.agents.forEach(function (agent) {
                                    names.push(agent.name);
                                });
                                console.log(names);
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Stops the tournament
     */
    RoundRobin.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.status !== __1.Tournament.Status.RUNNING) {
                throw new DimensionError_1.TournamentError("Can't stop a tournament that isn't running");
            }
            _this.log.info('Stopping Tournament...');
            _this.status = __1.Tournament.Status.STOPPED;
            _this.resumePromise = new Promise(function (resumeResolve) {
                _this.resumeResolver = resumeResolve;
            });
            _this.shouldStop = true;
            _this.resolveStopPromise = resolve;
        });
    };
    /**
     * Resumes the tournament
     */
    RoundRobin.prototype.resume = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.status !== __1.Tournament.Status.STOPPED) {
                    throw new DimensionError_1.TournamentError("Can't resume a tournament that isn't stopped");
                }
                this.log.info('Resuming Tournament...');
                this.status = __1.Tournament.Status.RUNNING;
                this.resumeResolver();
                return [2 /*return*/];
            });
        });
    };
    // TODO: move sorting to run function. It's ok too sort like this for small leagues, but larger will become slow.
    /**
     * Returns the current rankings
     */
    RoundRobin.prototype.getRankings = function () {
        var _this = this;
        var ranks = [];
        this.state.playerStats.forEach(function (playerStat) {
            var score = playerStat.wins * _this.configs.rankSystemConfigs.winValue +
                playerStat.ties * _this.configs.rankSystemConfigs.tieValue +
                playerStat.losses * _this.configs.rankSystemConfigs.lossValue;
            ranks.push({
                player: playerStat.player,
                name: playerStat.player.tournamentID.name,
                id: playerStat.player.tournamentID.id,
                score: score,
                wins: playerStat.wins,
                losses: playerStat.losses,
                ties: playerStat.ties,
                matchesPlayed: playerStat.matchesPlayed
            });
        });
        if (this.configs.rankSystemConfigs.ascending) {
            ranks.sort(function (a, b) {
                return b.score - a.score;
            });
        }
        else {
            ranks.sort(function (a, b) {
                return a.score - b.score;
            });
        }
        return ranks;
    };
    /**
     * Gets the current configs
     */
    RoundRobin.prototype.getConfigs = function () {
        return this.configs;
    };
    /**
     * Sets the configs
     * @param configs - configs to use
     */
    RoundRobin.prototype.setConfigs = function (configs) {
        if (configs === void 0) { configs = {}; }
        this.configs = DeepMerge_1.deepMerge(this.configs, configs, true);
    };
    RoundRobin.prototype.initialize = function () {
        var _this = this;
        this.state.playerStats = new Map();
        this.state.results = [];
        this.competitors.forEach(function (player) {
            _this.state.playerStats.set(player.tournamentID.id, {
                player: player,
                wins: 0,
                ties: 0,
                losses: 0,
                matchesPlayed: 0
            });
        });
        if (this.configs.consoleDisplay) {
            this.printTournamentStatus();
        }
    };
    /**
     * Queue up all matches necessary
     */
    RoundRobin.prototype.schedule = function () {
        this.log.detail('Scheduling... ');
        var matchSets = [];
        for (var i = 0; i < this.configs.tournamentConfigs.times; i++) {
            matchSets.push.apply(matchSets, this.generateARound());
        }
        this.matchQueue = matchSets;
    };
    RoundRobin.prototype.generateARound = function () {
        var roundQueue = [];
        var comp = Array.from(this.competitors.values());
        for (var i = 0; i < this.competitors.size; i++) {
            for (var j = i + 1; j < this.competitors.size; j++) {
                var player1 = comp[i];
                var player2 = comp[j];
                roundQueue.push([player1, player2]);
            }
        }
        return roundQueue;
    };
    RoundRobin.prototype.internalAddPlayer = function (player) {
        return;
    };
    RoundRobin.prototype.updatePlayer = function (player, oldname, oldfile) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new DimensionError_1.TournamentError('You are not allowed to update a player during elimination tournaments');
            });
        });
    };
    RoundRobin.prototype.printTournamentStatus = function () {
        if (this.log.level > Logger_1.Logger.LEVEL.NONE) {
            console.clear();
            console.log(this.log.bar());
            console.log("Tournament - ID: " + this.id + ", Name: " + this.name + " | Dimension - ID: " + this.dimension.id + ", Name: " + this.dimension.name + "\nStatus: " + this.status + " | Competitors: " + this.competitors.size + " | Rank System: " + this.configs.rankSystem + "\n");
            console.log('Total Matches: ' + this.state.statistics.totalMatches);
            var ranks = this.getRankings();
            switch (this.configs.rankSystem) {
                case __1.Tournament.RankSystem.WINS:
                    console.log(sprintf_js_1.sprintf("%-20s | %-8s | %-15s | %-6s | %-6s | %-8s | %-8s".underline, 'Name', 'ID', 'Score', 'Wins', 'Ties', 'Losses', 'Matches'));
                    ranks.forEach(function (info) {
                        console.log(sprintf_js_1.sprintf("%-20s".blue + " | %-8s | " + "%-15s".green + " | %-6s | %-6s | %-8s | %-8s", info.player.tournamentID.name, info.player.tournamentID.id, info.score.toFixed(3), info.wins, info.ties, info.losses, info.matchesPlayed));
                    });
                    break;
            }
        }
    };
    return RoundRobin;
}(__1.Tournament));
exports.RoundRobin = RoundRobin;
//# sourceMappingURL=index.js.map