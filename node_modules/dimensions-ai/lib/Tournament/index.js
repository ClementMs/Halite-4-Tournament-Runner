"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Match_1 = require("../Match");
var DimensionError_1 = require("../DimensionError");
var Logger_1 = require("../Logger");
var RankSystemDefault = require("./RankSystem");
var DeepCopy_1 = require("../utils/DeepCopy");
var utils_1 = require("../utils");
var TournamentStatusDefault = require("./TournamentStatus");
var TournamentTypeDefault = require("./TournamentTypes");
/** @ignore */
var _RankSystem = RankSystemDefault.RankSystem;
/** @ignore */
var _TOURNAMENT_TYPE = TournamentTypeDefault.TournamentType;
/** @ignore */
var _TournamentStatus = TournamentStatusDefault.TournamentStatus;
/**
 * Player class that persists data for the same ephemereal agent across multiple matches
 */
var Player = /** @class */ (function () {
    function Player(tournamentID, file, zipFile, botkey) {
        this.tournamentID = tournamentID;
        this.file = file;
        /**
         * Whether this player is anonymous and not tied to a user on the back end
         *
         * If this is ever false, then that means 1. we have a backend setup 2. there is an actual user entry
         */
        this.anonymous = true;
        /** Associated username if there is one */
        this.username = undefined;
        /**
         * Path to player's directory, not the file to be executed/used
         */
        this.botDirPath = undefined;
        /**
         * Key that references the player's bot file object if it exists
         */
        this.botkey = undefined;
        /**
         * Whether or not this player is disabled and won't be used in in the default match scheduling for
         * {@link Tournament.Ladder | Ladder Tournaments}. Is set to true if this player's bot throws an error during
         * the initialization stage of a {@link Match}.
         */
        this.disabled = false;
        /**
         * Path to the zip file for the bot
         */
        this.zipFile = undefined;
        this.botkey = botkey;
        this.zipFile = zipFile;
    }
    /**
     * Generates a 12 character player id string
     */
    Player.generatePlayerID = function () {
        return utils_1.genID(12);
    };
    return Player;
}());
exports.Player = Player;
/**
 * The tournament class and module extended by all concrete Tournament Classes. Tournament Types available now are
 * {@link RoundRobin}, {@link Ladder}, {@link Elimination}. A tournament is composed of players, which can either be
 * all locally stored, or a split between locally stored anonymous players and database stored user owned players.
 * Ladder is the only tournament where it can be made distributed, other tournament types may only be run as a single
 * instance
 *
 * Notes: `this.competitors` map is used when no DB is used. When a DB is used, locally stored players are only in
 * `this.anonymousCompetitors` and other players are pulled from DB. Hence, a lot of code requires checking if database
 * exists and if so, pull from there and the anonymous competitors map, other wise use this.state or this.competitors
 */
var Tournament = /** @class */ (function () {
    function Tournament(design, files, id, tournamentConfigs, dimension) {
        this.design = design;
        /** Mapping match ids to active ongoing matches */
        this.matches = new Map();
        /** A queue whose elements are each arrays of players that are to compete against each other */
        this.matchQueue = [];
        /** The current status of the tournament */
        this.status = Tournament.Status.UNINITIALIZED;
        /** Logger */
        this.log = new Logger_1.Logger();
        /** Registered competitors in this tournament */
        this.competitors = new Map();
        /** All competitors that are anonymous competitors and not registered in database */
        this.anonymousCompetitors = new Map();
        this.playerID = 0;
        /**
         * This Tournament's name
         */
        this.name = '';
        /**
         * Promise array of which all resolves once every player added through constructor is finished adding
         */
        this.initialAddPlayerPromises = [];
        this.id = id;
        // use overriden id if provided
        if (tournamentConfigs.id) {
            this.id = tournamentConfigs.id;
        }
        this.log.level = (tournamentConfigs.loggingLevel !== undefined) ? tournamentConfigs.loggingLevel : Logger_1.Logger.LEVEL.INFO;
        this.name = tournamentConfigs.name ? tournamentConfigs.name : "tournament_" + this.id;
        this.log.identifier = this.name;
        this.dimension = dimension;
        this.log.info("Created Tournament - ID: " + this.id + ", Name: " + this.name);
        // if no name is provided but database is being used, log an error
        if (!tournamentConfigs.name && dimension.hasDatabase()) {
            this.log.error("A name has to be specified for a tournament otherwise tournament player data will not be reused across runs of the tournament");
        }
    }
    /**
     * Add a player to the tournament. Can specify an ID to use. If that ID exists already, this will update the file for
     * that player instead. First time a player is added (doesn't exist in competitors map yet), if there is existing
     * stats they won't be reset. Subsequent adds will change the stats.
     *
     * If the player is to exist beyond the tournament, an existingID must always be provided and generated somewhere else
     *
     * Resolves with the new player or updated player
     *
     * @param file - The file to the bot or an object with the file and a name for the player specified
     * @param existingID - The optional id of the player
     *
     */
    Tournament.prototype.addplayer = function (file, existingID) {
        return __awaiter(this, void 0, void 0, function () {
            var id, playerStat, player, oldname, oldfile, name_1, newPlayer, user, newPlayer, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!existingID) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getPlayerStat(existingID)];
                    case 1:
                        playerStat = (_a.sent()).playerStat;
                        if (!playerStat) return [3 /*break*/, 3];
                        player = playerStat.player;
                        // undisable the player
                        player.disabled = false;
                        oldname = player.tournamentID.name;
                        oldfile = player.file;
                        // remove the oldfile
                        if (player.botDirPath) {
                            // player.lock();
                            System_1.removeDirectorySync(player.botDirPath);
                            // player.unlock();
                        }
                        if (typeof file === 'string') {
                            player.file = file;
                        }
                        else {
                            player.file = file.file;
                            player.tournamentID.name = file.name;
                            player.botDirPath = file.botdir;
                            player.zipFile = file.zipFile;
                            player.botkey = file.botkey;
                        }
                        // update bot instead and call a tournament's updateBot function
                        return [4 /*yield*/, this.updatePlayer(player, oldname, oldfile)];
                    case 2:
                        // update bot instead and call a tournament's updateBot function
                        _a.sent();
                        id = existingID;
                        return [2 /*return*/, player];
                    case 3:
                        // otherwise bot doesn't exist, and we use this id as our id to generate a new player
                        id = existingID;
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        id = this.generateNextTournamentIDString();
                        _a.label = 6;
                    case 6:
                        if (!(typeof file === 'string')) return [3 /*break*/, 10];
                        name_1 = "player-" + id;
                        newPlayer = new Player({ id: id, name: name_1, username: undefined }, file, undefined);
                        if (!this.dimension.hasDatabase()) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.dimension.databasePlugin.getUser(newPlayer.tournamentID.id)];
                    case 7:
                        user = _a.sent();
                        if (user) {
                            newPlayer.anonymous = false;
                            newPlayer.username = user.username;
                            newPlayer.tournamentID.username = user.username;
                        }
                        else {
                            this.competitors.set(id, newPlayer);
                        }
                        return [3 /*break*/, 9];
                    case 8:
                        this.competitors.set(id, newPlayer);
                        _a.label = 9;
                    case 9:
                        if (newPlayer.anonymous) {
                            this.anonymousCompetitors.set(id, newPlayer);
                        }
                        this.internalAddPlayer(newPlayer);
                        return [2 /*return*/, newPlayer];
                    case 10:
                        newPlayer = new Player({ id: id, name: file.name, username: undefined }, file.file, file.zipFile, file.botkey);
                        newPlayer.botDirPath = file.botdir;
                        if (!this.dimension.hasDatabase()) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.dimension.databasePlugin.getUser(newPlayer.tournamentID.id)];
                    case 11:
                        user = _a.sent();
                        if (user) {
                            newPlayer.tournamentID.name = file.name;
                            newPlayer.anonymous = false;
                            newPlayer.username = user.username;
                            newPlayer.tournamentID.username = user.username;
                        }
                        else {
                            this.competitors.set(id, newPlayer);
                        }
                        return [3 /*break*/, 13];
                    case 12:
                        this.competitors.set(id, newPlayer);
                        _a.label = 13;
                    case 13:
                        if (newPlayer.anonymous) {
                            this.anonymousCompetitors.set(id, newPlayer);
                        }
                        this.internalAddPlayer(newPlayer);
                        return [2 /*return*/, newPlayer];
                }
            });
        });
    };
    /**
     * Returns a new id for identifying a player in a tournament
     * Only used when adding a plyaer to a tournament is done without specifying an id to use.
     */
    Tournament.prototype.generateNextTournamentIDString = function () {
        return Player.generatePlayerID();
    };
    /**
     * Disables the player with id playerID
     * @param playerID - the player's id to disable
     */
    Tournament.prototype.disablePlayer = function (playerID) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, user, playerStat;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getPlayerStat(playerID)];
                    case 1:
                        _a = _b.sent(), user = _a.user, playerStat = _a.playerStat;
                        if (!playerStat) return [3 /*break*/, 4];
                        playerStat.player.disabled = true;
                        if (!(this.dimension.hasDatabase() && user)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.dimension.databasePlugin.updateUser(playerID, user)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4: throw new DimensionError_1.TournamentPlayerDoesNotExistError("Player " + playerID + " was not found in this tournament");
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes the competitor/player with id `playerID` (a {@link nanoid}). Resolves if succesful, otherwise rejects if
     * player doesn't exist or couldn't be removed
     *
     * @param playerID - ID of the player to remove
     */
    Tournament.prototype.removePlayer = function (playerID) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, user, playerStat;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getPlayerStat(playerID)];
                    case 1:
                        _a = _b.sent(), user = _a.user, playerStat = _a.playerStat;
                        if (!playerStat) return [3 /*break*/, 5];
                        this.competitors.delete(playerID);
                        this.anonymousCompetitors.delete(playerID);
                        // disable player
                        playerStat.player.disabled = true;
                        if (!(this.dimension.hasDatabase() && user)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.dimension.databasePlugin.updateUser(playerID, user)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [4 /*yield*/, this.internalRemovePlayer(playerID)];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5: throw new DimensionError_1.TournamentPlayerDoesNotExistError('Not a player');
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Tournament.prototype.internalRemovePlayer = function (playerID) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    /**
     * Runs a match
     * @param players - the players to compete together
     * @returns a promise that resolves with the results and the associated match
     */
    Tournament.prototype.runMatch = function (players) {
        return __awaiter(this, void 0, void 0, function () {
            var matchConfigs, match, filesAndNamesAndIDs, results, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!players.length)
                            throw new DimensionError_1.FatalError('No players provided for match');
                        matchConfigs = DeepCopy_1.deepCopy(this.getConfigs().defaultMatchConfigs);
                        filesAndNamesAndIDs = players.map(function (player) {
                            // if player has a botkey, use that, otherwise use whats in player.file
                            return { file: player.file, tournamentID: player.tournamentID, botkey: player.botkey };
                        });
                        match = new Match_1.Match(this.design, filesAndNamesAndIDs, matchConfigs, this.dimension);
                        // store match into the tournament locally
                        this.matches.set(match.id, match);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, match.initialize()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, match.run()];
                    case 3:
                        results = _a.sent();
                        // if database plugin is active and saveTournamentMatches is set to true, store match
                        if (this.dimension.hasDatabase()) {
                            if (this.dimension.databasePlugin.configs.saveTournamentMatches) {
                                this.dimension.databasePlugin.storeMatch(match, this.id);
                            }
                        }
                        // remove the match from the active matches list
                        this.matches.delete(match.id);
                        // TODO: Add option to just archive matches instead
                        // Resolve the results
                        return [2 /*return*/, { results: results, match: match }];
                    case 4:
                        err_1 = _a.sent();
                        return [2 /*return*/, {
                                results: false,
                                err: err_1,
                                match: match
                            }];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes a match by id. Returns true if deleted, false if nothing was deleted
     */
    Tournament.prototype.removeMatch = function (matchID) {
        return __awaiter(this, void 0, void 0, function () {
            var match;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.matches.has(matchID)) return [3 /*break*/, 2];
                        match = this.matches.get(matchID);
                        return [4 /*yield*/, match.destroy()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.matches.delete(matchID)];
                    case 2: return [2 /*return*/, false];
                }
            });
        });
    };
    /**
     * Destroy this tournament. Rejects if an error occured in trying to destroy it.
     */
    Tournament.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var destroyPromises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInternalDestroy()];
                    case 1:
                        _a.sent();
                        // stop if running
                        if (this.status === Tournament.Status.RUNNING)
                            this.stop();
                        destroyPromises = [];
                        // now remove all match processes
                        this.matches.forEach(function (match) {
                            destroyPromises.push(match.destroy());
                        });
                        return [4 /*yield*/, Promise.all(destroyPromises)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.postInternalDestroy()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Pre run function before generic destroy takes place
     */
    Tournament.prototype.preInternalDestroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    /**
     * Post run function before generic destroy takes place
     */
    Tournament.prototype.postInternalDestroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    /**
     * Generates a 6 character tournament ID identifying this tournament class instance. Not to be confused with
     * {@link Tournament.ID} which is the ID for competitors in the tournament
     */
    Tournament.genTournamentClassID = function () {
        return utils_1.genID(6);
    };
    /**
     * Returns the name of the tournament but formatted (no spaces)
     */
    Tournament.prototype.getSafeName = function () {
        return this.name.replace(/ /g, '_');
    };
    /**
     * Returns a key name to be used when storing a tournament by a combination of its name and id
     */
    Tournament.prototype.getKeyName = function () {
        return this.getSafeName() + "_" + this.id;
    };
    /**
     * Resolves with player stats if player with the id exists. Includes database user if db contains the player
     * Fields are null if they don't exist. If playerStat field is null, then this player does not exist
     *
     * @param id - id of player to get
     */
    Tournament.prototype.getPlayerStat = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.state.playerStats.has(id)) return [3 /*break*/, 3];
                        if (!this.dimension.hasDatabase()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dimension.databasePlugin.getUser(id)];
                    case 1:
                        user = _a.sent();
                        if (user && user.statistics[this.getKeyName()]) {
                            return [2 /*return*/, { user: user, playerStat: user.statistics[this.getKeyName()] }];
                        }
                        _a.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3: return [2 /*return*/, { user: null, playerStat: this.state.playerStats.get(id) }];
                    case 4: return [2 /*return*/, { user: null, playerStat: null }];
                }
            });
        });
    };
    return Tournament;
}());
exports.Tournament = Tournament;
// some imports moved to here to avoid circular issues with using values
var LadderDefault = require("./Ladder");
/** @ignore */
var LadderTournament = LadderDefault.Ladder;
var RoundRobinDefault = require("./RoundRobin");
/** @ignore */
var RoundRobinTournament = RoundRobinDefault.RoundRobin;
var EliminationDefault = require("./Elimination");
/** @ignore */
var EliminationTournament = EliminationDefault.Elimination;
var System_1 = require("../utils/System");
(function (Tournament) {
    // Re-export some types
    Tournament.Type = _TOURNAMENT_TYPE;
    Tournament.Status = _TournamentStatus;
    Tournament.RankSystem = _RankSystem;
    /**
     * @deprecated since v2.1.0
     *
     * Use {@link Tournament.RankSystem} instead
     */
    Tournament.RANK_SYSTEM = _RankSystem;
    /**
     * @deprecated since v2.1.0
     *
     * Use {@link Tournament.Type} instead.
     */
    Tournament.TOURNAMENT_TYPE = _TOURNAMENT_TYPE;
    /**
     * @deprecated since v2.1.0
     *
     * Use {@link Tournament.Status} instead.
     */
    Tournament.TournamentStatus = _TournamentStatus;
    // Re-export tournament classes/namespaces
    Tournament.Ladder = LadderTournament;
    Tournament.RoundRobin = RoundRobinTournament;
    Tournament.Elimination = EliminationTournament;
})(Tournament = exports.Tournament || (exports.Tournament = {}));
exports.Tournament = Tournament;
//# sourceMappingURL=index.js.map